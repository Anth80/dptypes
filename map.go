package main

import (
	"bytes"
	"html/template"
)

type mapParams struct {
	Name     string
	Pkg      string
	DataType string
}

func genMap(name, pkg, dataType string) ([]byte, error) {
	t := template.Must(template.New("map").Parse(`
// Code generated by dptypes. DO NOT EDIT.

package {{.Pkg}}

type {{.Name}} struct {
	buf     []byte,
	bufSize uint64
	lut     map[string]uint64
}

func New{{.Name}}() *{{.Name}} {
	return {{.Name}}{
		buf: make(buf),
		lut: make(map[string]uint64, 0),
	}
}

func (x *) Set(key string, value {{.DataType}}) {

}

func (x *) Get(key string) {{.DataType}}{

}
	`))

	w := bytes.NewBuffer(nil)
	p := mapParams{name: name, dataType: dataType}
	if err := t.Execute(w, p); err != nil {
		return []byte{}, err
	}

	return w.Bytes(), nil
}
